package app;


import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.Calendar;
import java.util.GregorianCalendar;
import javax.swing.JButton;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JRadioButton;
import javax.swing.JTextField;
import javax.swing.event.ChangeEvent;

/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */

/**
 *
 * @author Administrador
 */
public class registros extends javax.swing.JFrame{
    //Generar el objeto cx de la calse Conexion
    Conexion cx = new Conexion();

    /**
     * Creates new form registros
     */
    public registros() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        panel1 = new java.awt.Panel();
        buttonGroup1 = new javax.swing.ButtonGroup();
        panel2 = new java.awt.Panel();
        entrada = new javax.swing.JRadioButton();
        salida = new javax.swing.JRadioButton();
        jLabel1 = new javax.swing.JLabel();
        documento = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        ir = new javax.swing.JButton();
        datosRegistro = new javax.swing.JLabel();

        javax.swing.GroupLayout panel1Layout = new javax.swing.GroupLayout(panel1);
        panel1.setLayout(panel1Layout);
        panel1Layout.setHorizontalGroup(
            panel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );
        panel1Layout.setVerticalGroup(
            panel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        buttonGroup1.add(entrada);
        entrada.setSelected(true);
        entrada.setText("Entrada");
        entrada.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                entradaActionPerformed(evt);
            }
        });

        buttonGroup1.add(salida);
        salida.setText("Salida");

        jLabel1.setText("Registro Entrada y Salida");

        documento.setHorizontalAlignment(javax.swing.JTextField.LEFT);
        documento.setText("Digite su Documento");
        documento.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                documentoActionPerformed(evt);
            }
        });

        jLabel2.setText("Ingrese su Documento");

        ir.setText("IR");
        ir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                irActionPerformed(evt);
            }
        });

        datosRegistro.setText("Usuario:                                   Hora de registro: ");

        javax.swing.GroupLayout panel2Layout = new javax.swing.GroupLayout(panel2);
        panel2.setLayout(panel2Layout);
        panel2Layout.setHorizontalGroup(
            panel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panel2Layout.createSequentialGroup()
                .addGroup(panel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panel2Layout.createSequentialGroup()
                        .addGap(114, 114, 114)
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 147, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(panel2Layout.createSequentialGroup()
                        .addGap(53, 53, 53)
                        .addGroup(panel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2)
                            .addComponent(entrada, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(datosRegistro, javax.swing.GroupLayout.DEFAULT_SIZE, 323, Short.MAX_VALUE))))
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panel2Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(panel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panel2Layout.createSequentialGroup()
                        .addComponent(salida, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(69, 69, 69))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panel2Layout.createSequentialGroup()
                        .addComponent(documento, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(50, 50, 50))))
            .addGroup(panel2Layout.createSequentialGroup()
                .addGap(137, 137, 137)
                .addComponent(ir)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        panel2Layout.setVerticalGroup(
            panel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panel2Layout.createSequentialGroup()
                .addGap(17, 17, 17)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(panel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(salida)
                    .addComponent(entrada))
                .addGap(18, 18, 18)
                .addGroup(panel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(documento, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2))
                .addGap(30, 30, 30)
                .addComponent(ir)
                .addGap(33, 33, 33)
                .addComponent(datosRegistro)
                .addContainerGap(46, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(panel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(panel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 26, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void entradaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_entradaActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_entradaActionPerformed

    private void irActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_irActionPerformed
        //Consulta la información del trabajador y la alamacena
        String[] trabajador = consultarTrabajador(documento.getText());
        
        Calendar fecha=new GregorianCalendar();

        String anho=Integer.toString(fecha.get(Calendar.YEAR));
        String mes=Integer.toString(fecha.get(Calendar.MONTH));
        String dia=Integer.toString(fecha.get(Calendar.DATE));
        String hora=Integer.toString(fecha.get(Calendar.HOUR_OF_DAY));
        String minuto=Integer.toString(fecha.get(Calendar.MINUTE));

        String fechacom= anho+"-"+mes+"-"+dia;
        String horaActual= hora+":"+minuto+":00";
        int documentoInt= Integer.parseInt(documento.getText());
        
        if(this.entrada.isSelected()){
        if (documento.getText()!= "" && documentoInt>=0){
        this.datosRegistro.setText("Entrada"+" Usuario: "+this.documento.getText()+" Hora de Registro: "+hora+":"+minuto);
        }
            
        }else if (this.salida.isSelected()){
            if (documento.getText()!= "" && documentoInt>=0){
            this.datosRegistro.setText("Salida"+" Usuario: "+this.documento.getText()+" Hora de Registro: "+hora+":"+minuto);
            }
        }
        
        //Verifica que el trabajador exista para generar un registro o no
        if(trabajador[0] != null){
            guardarRegistro(documento.getText(),fechacom,horaActual);
        }else{
            JOptionPane.showMessageDialog(null, "UPS! No se pudo encontrar el trabajador");
        }
    }//GEN-LAST:event_irActionPerformed

    /*
    * Consulta la información de un trabajador y la entrega en un arreglo
    * String documento documento del trabajador a consultar
    * Devulve la información del trabajador
    */
    private String[] consultarTrabajador(String documento){
        try{
            //Crear una nueva conexion a la base de datos
            Connection con = cx.cadena_conexion();
            ResultSet rs;
            
            //Consultar información del trabajador por su documento
            PreparedStatement ps = con.prepareStatement("SELECT * FROM trabajador WHERE documento = ?");
            ps.setString(1, documento);
            rs = ps.executeQuery();
            
            //LLena la información del trabajador en un arreglo con la información obtenida
            String[] infoPersona = new String[7];
            int rowCount = 0;
            int codigoAcceso = -1;
            while(rs.next()) {
                rowCount++;
                //llena el arreglo con la información del trabajador
                infoPersona[0] = rs.getString("documento");
                infoPersona[1] = rs.getString("primerNombre");
                infoPersona[2] = rs.getString("segundoNombre");
                infoPersona[3] = rs.getString("primerApellido");
                infoPersona[4] = rs.getString("segundoApellido");
                infoPersona[5] = rs.getString("edad");
                infoPersona[6] = rs.getString("telefono");
            }
            
            return infoPersona;
        } catch(SQLException e){
            String[] infoPersona = new String[7];
            JOptionPane.showMessageDialog(null, e.toString());
            return infoPersona;
        }
    }
    
    /*
    * Permite registrar la salida o ingreso de un trabajador
    * String documento Documento del trabajador
    * String fecha Fecha de ingreso o salida del trabajador
    * String hora Hora de ingreso o salida del trabajador
    */
    private void guardarRegistro(String documento, String fecha,String hora){
        try{
            //Crear una nueva conexion a la base de datos
            Connection con = cx.cadena_conexion();
            ResultSet rs;
            
            //Se genera la petición para consultar si el trabajador tiene un ingreso activo
            PreparedStatement ps = con.prepareStatement("SELECT * FROM accesos WHERE fk_trabajador = ? AND fecha_Salida IS NULL");
            ps.setString(1, documento);
            rs = ps.executeQuery();
            
            //Cuenta la cantidad de registros encontrados y guarda su codigo de acceso
            int rowCount = 0;
            int codigoAcceso = -1;
            while(rs.next()) {
                rowCount++;
                codigoAcceso = rs.getInt("codigo_acceso");
            }
            
            //Comprueba si tiene registros para registrar la salida o el ingreso
            if(rowCount > 0 && codigoAcceso != -1){
                //Genera el ingreso del trabajador
                actualizarSalida(fecha, hora, codigoAcceso);
            }else{
                //Genera la salida del trabajador
                generarIngreso(fecha, hora, documento);
            }
        } catch(SQLException e){
            JOptionPane.showMessageDialog(null, e.toString());
        }
    }
    
    /*
    * Permite generar el registro de ingreso de una nueva persona
    * String feha Fecha en la que sera actualizado el registro
    * String hora Hora en la que sera actualizado el registro
    * String documento Documento de la persona
    */
    private void generarIngreso(String fecha, String hora, String documento){
        try{
            //Crear una nueva conexion a la base de datos
            Connection con = cx.cadena_conexion();
            ResultSet rs;
            
            //Se genera la petición para actualizar un registro a la base de datos
            PreparedStatement ps = con.prepareStatement("INSERT INTO accesos (fecha_ingreso, hora_ingreso, fk_trabajador) VALUES(?, ?, ?)");

            //Añadir los campos que seran actualizados con la nueva información
            ps.setString(1, fecha);
            ps.setString(2, hora);
            ps.setString(3, documento);

            // ps.execute udate // se guardan
            ps.executeUpdate();
        } catch(SQLException e){
            JOptionPane.showMessageDialog(null, e.toString());
        }
    }
    
    /*
    * Permite generar el registro de salida de una nueva persona
    * String feha Fecha en la que sera actualizado el registro
    * String hora Hora en la que sera actualizado el registro
    * String codigo Codigo de acceso que sera actualizado
    */
    private void actualizarSalida(String fecha, String hora, int codigo){
        try{
            //Crear una nueva conexion a la base de datos
            Connection con = cx.cadena_conexion();
            ResultSet rs;
            
            //Se genera la petición para actualizar un registro a la base de datos
            PreparedStatement ps = con.prepareStatement("UPDATE accesos SET fecha_Salida=?,hora_Salida=? WHERE codigo_acceso=?");

            //Añadir los campos que seran actualizados con la nueva información
            ps.setString(1, fecha);
            ps.setString(2, hora);
            ps.setInt(3, codigo);

            //ejecuta la actualización del registro
            ps.executeUpdate();
        } catch(SQLException e){
            JOptionPane.showMessageDialog(null, e.toString());
        }
    }
    
    private void documentoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_documentoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_documentoActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(registros.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(registros.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(registros.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(registros.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        
        
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new registros().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JLabel datosRegistro;
    private javax.swing.JTextField documento;
    private javax.swing.JRadioButton entrada;
    private javax.swing.JButton ir;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private java.awt.Panel panel1;
    private java.awt.Panel panel2;
    private javax.swing.JRadioButton salida;
    // End of variables declaration//GEN-END:variables


    public JRadioButton getEntrada() {
        return entrada;
    }

    public void setEntrada(JRadioButton entrada) {
        this.entrada = entrada;
    }

    public JButton getIr() {
        return ir;
    }

    public void setIr(JButton ir) {
        this.ir = ir;
    }

    public JRadioButton getSalida() {
        return salida;
    }

    public void setSalida(JRadioButton salida) {
        this.salida = salida;
    }

    public registros(JRadioButton entrada, JButton ir, JRadioButton salida) {
        this.entrada = entrada;
        this.ir = ir;
        this.salida = salida;
    }

    public registros(JLabel datosRegistro, JTextField documento) {
        this.datosRegistro = datosRegistro;
        this.documento = documento;
    }

    public JLabel getDatosRegistro() {
        return datosRegistro;
    }

    public void setDatosRegistro(JLabel datosRegistro) {
        this.datosRegistro = datosRegistro;
    }

    public JTextField getDocumento() {
        return documento;
    }

    public void setDocumento(JTextField documento) {
        this.documento = documento;
    }
    
public void radioButton (ChangeEvent e){
   if(this.entrada.isSelected()){
   
   }
}
}
 
    
